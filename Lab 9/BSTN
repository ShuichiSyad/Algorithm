class BSTN {
    
    private BSTNode root;
    
    public BSTN(){
        root = null;
    }
    
    public boolean isEmpty(){
        return root == null;
    }
    
    public void insert(int data){
        root = insert(root,data);
    }
    
    private BSTNode insert (BSTNode node,int data){
        
        if(node == null){
            node = new BSTNode(data);
        }
        else{
            if(data <=node.getData())
                node.left = insert(node.left,data);
            else
                node.right=insert(node.right,data);
        }
        return node;
    }
    
    public void delete (int k){
        if(isEmpty())
            System.out.println("Empty");
        else if(search(k) == false)
            System.out.println("Sorry "+k+"is not here");
        else {
            root = delete(root,k);
            System.out.println(k + "deleted");
        }
    }
    
   private BSTNode delete(BSTNode root ,int k){
        BSTNode p ,p2 ,n;
        if(root.getData() == k){
            BSTNode lt , rt ;
            lt = root.getLeft();
            rt = root.getRight();
            if(lt == null && rt == null)
                return null;
            
            else if(lt == null){
                p =rt;
                return p;
            }
            
            else if (rt == null){
                p =lt;
                return p;
            }
            else {
                p2 =rt;
                p =rt;
                while(p.getLeft() != null)
                    p = p.getLeft();
                p.setLeft(lt);
                return p2;
            }
        }
        
        if(k < root.getData()){
            n = delete(root.getLeft(),k);
            root.setLeft(n);
        }
        else {
            n = delete(root.getRight(),k);  
            root.setRight(n);
        }
        return root;
    } 
    
    public int countNodes(){
        return countNodes(root);
    }
    
    public int countNodes(BSTNode r){
        if(r == null)
            return 0;
        else{
            int l= 1;
            l = l+countNodes(r.getLeft());
            l = l+ countNodes(r.getRight());
            return l;
        }
    }
    public boolean search (int val){
        return search(root,val);
    }
    
    public boolean search (BSTNode r , int val){
        boolean found = false;
        
        while ((r != null) && !found){
            int rval = r.getData();
            if(val < rval)
                r=r.getLeft();
            else if (val > rval)
                r = r.getRight();
            else {
                found = true;
                break;
            }
            found = search(r,val);
        }
        return found;
    }
    
    public void inorder(){
        inorder(root);
    }
    
    public void inorder(BSTNode r){
        if(r!= null){
            inorder(r.getLeft());
            System.out.println(r.getData() + " ");
            inorder(r.getRight());
        }
    }
    
    public void preorder(){
        preorder(root);
    }
    
    public void preorder(BSTNode r){
        if(r!=null){
            System.out.println(r.getData() + " ");
            preorder(r.getLeft());
            preorder(r.getRight());
        }
    }
    
    public void postorder(){
        postorder(root);
    }
    
    public void postorder(BSTNode r){
        if(r!=null){
            postorder(r.getLeft());
            postorder(r.getRight());
            System.out.println(r.getData()+ " ");
        }
    }
    
    public void del_ref(int k){
        del_ref(root,k);
    }
    
    public void del_ref(BSTNode r , int ref){
        if(r!= null){
            if(r.getData()<ref){
                delete(r.getData());
            }
            del_ref(r.getLeft(),ref);
            del_ref(r.getRight(),ref);
        }  
    }
    
    public boolean che_input(int k){
        return che_input(root,k);
    }
    
    public boolean che_input(BSTNode r , int input){
        boolean found = true;
        
        while ((r != null) && found){
            int rval = r.getData();
            if(rval!=0 && (rval-input)>=-3 &&(rval-input)<=3 ){
                found = false;
            }
            else {
                
                if(input < rval)
                r=r.getLeft();
                else if (input > rval)
                r = r.getRight(); 
            }
           
            
        }
        return found;
    }
}
